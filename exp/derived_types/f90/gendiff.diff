[0m[38;5;11mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
[38;5;11mrenamed: fibby[7mmodule[27m.c[38;5;11m to fibby[7mhand[27m.c
[38;5;11mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
[1m[38;5;13m@ fibbyhand.c:4 @[1m[0m
[1m[38;5;1m/* File: fibby[7mmodule[27m.c[0m
[1m[38;5;2m/* File: fibby[7mhand[27m.c[0m
 * This file is auto-generated with f2py (version:1.23.0.dev0+98.g0e10696f5).
 * f2py is a Fortran to Python Interface Generator (FPIG), Second Edition,
 * written by Pearu Peterson <pearu@cens.ioc.ee>.
[1m[38;5;1m * Generation date: Thu Dec 30 2[7m3:20:26[27m 2021[0m
[1m[38;5;2m * Generation date: Thu Dec 30 2[7m2:18:08[27m 2021[0m
 * Do not edit this file directly unless you know what you are doing!!!
 */

[1m[38;5;13m@ fibbyhand.c:31 @[1m[0m

/****************** See f2py2e/cfuncs.py: typedefs_generated ******************/
/*need_typedefs_generated*/
[1m[38;5;2mtypedef struct {[0m
[1m[38;5;2m  double x,y,z;[0m
[1m[38;5;2m} cartesian;[0m

/********************** See f2py2e/cfuncs.py: cppmacros **********************/
[1m[38;5;2m#define DEBUGCFUNCS[0m
#ifdef DEBUGCFUNCS
#define CFUNCSMESS(mess) fprintf(stderr,"debug-capi:"mess);
#define CFUNCSMESSPY(mess,obj) CFUNCSMESS(mess) \
[1m[38;5;13m@ fibbyhand.c:125 @[1m[0m
static PyObject *f2py_rout_fibby_vec_unit_move(const PyObject *capi_self,
                           PyObject *capi_args,
                           PyObject *capi_keywds,
[1m[38;5;1m                           void (*f2py_func)([7mstruct[27m*)) {[0m
[1m[38;5;2m                           void (*f2py_func)([7mcartesian[27m*)) {[0m
    PyObject * volatile capi_buildvalue = NULL;
    volatile int f2py_success = 1;
/*decl*/

[1m[38;5;1m    struct array = 0;[0m
[1m[38;5;2m    cartesian array;[0m
[1m[38;5;2m    array.x=array.y=array.z=0;[0m
[1m[38;5;2m    fprintf(stderr, "%f %f %f\n", array.x, array.y, array.z);[0m
    PyObject *array_capi = Py_None;
    static char *capi_kwlist[] = {"array",NULL};

/*routdebugenter*/
[1m[38;5;2m    fprintf(stderr,"debug-capi:Python C/API function fibby.unit_move(array)\n");[0m
#ifdef F2PY_REPORT_ATEXIT
f2py_start_clock();
#endif
[1m[38;5;13m@ fibbyhand.c:147 @[1m[0m
        return NULL;
/*frompyobj*/
    /* Processing variable array */
[1m[38;5;1m        f2py_success = struct_from_pyobj(&array,array_capi,"fibby.vec.unit_move() 1st argument (array) can't be converted to struct");[0m
[1m[38;5;2m    fprintf(stderr,"debug-capi:struct array=:inoutput,required,scalar\n");[0m
[1m[38;5;2m        f2py_success = struct_from_pyobj(&array, capi_args,"fibby.vec.unit_move() 1st argument (array) can't be converted to struct");[0m
[1m[38;5;2m    fprintf(stderr,"Got a structure\n");[0m
[1m[38;5;2m    fprintf(stderr, "%f %f %f\n", array.x, array.y, array.z);[0m
    if (f2py_success) {
[1m[38;5;2m    fprintf(stderr,"debug-capi:array=%s\n",array);[0m
/*end of frompyobj*/
#ifdef F2PY_REPORT_ATEXIT
f2py_start_call_clock();
#endif
/*callfortranroutine*/
[1m[38;5;2m    fprintf(stderr,"debug-capi:Fortran subroutine `unit_move(&array)'\n");[0m
                (*f2py_func)(&array);
if (PyErr_Occurred())
  f2py_success = 0;
[1m[38;5;13m@ fibbyhand.c:168 @[1m[0m
/*end of callfortranroutine*/
        if (f2py_success) {
/*pyobjfrom*/
[1m[38;5;1m    f2py_success = try_pyarr_from_struct(array_capi,&array);[0m
[1m[38;5;2m    fprintf(stderr,"debug-capi:array=%s\n",array);[0m
[1m[38;5;2m    /* f2py_success = try_pyarr_from_struct(array_capi,&array); */[0m
    if (f2py_success) {
/*end of pyobjfrom*/
        CFUNCSMESS("Building return value.\n");
[1m[38;5;1m        capi_buildvalue = Py_BuildValue("");[0m
[1m[38;5;2m        capi_buildvalue = Py_BuildValue("{s:f,s:f,s:f}",[0m
[1m[38;5;2m                         "x", array.x,[0m
[1m[38;5;2m                         "y", array.y,[0m
[1m[38;5;2m                         "z", array.z);[0m
[7m[7m [0m
/*closepyobjfrom*/
    } /*if (f2py_success) of array pyobjfrom*/
/*end of closepyobjfrom*/
[1m[38;5;13m@ fibbyhand.c:188 @[1m[0m
/*end of cleanupfrompyobj*/
    if (capi_buildvalue == NULL) {
/*routdebugfailure*/
[1m[38;5;2m    fprintf(stderr,"debug-capi:Python C/API function fibby.unit_move: failure.\n");[0m
    } else {
/*routdebugleave*/
[1m[38;5;2m    fprintf(stderr,"debug-capi:Python C/API function fibby.unit_move: successful.\n");[0m
    }
    CFUNCSMESS("Freeing memory.\n");
/*freemem*/
[1m[38;5;13m@ fibbyhand.c:202 @[1m[0m
}
/****************************** end of unit_move ******************************/
/*eof body*/
[1m[38;5;2m/* struct_from_pyobj(&array,array_capi,"fibby.vec.unit_move() 1st argument (array) can't be converted to struct"); */[0m
[1m[38;5;2m    int struct_from_pyobj(cartesian *array, PyObject *array_capi, char* docs){[0m
[1m[38;5;2m    PyObject* dict;[0m
[1m[38;5;2m    PyArg_ParseTuple(array_capi, "O", &dict);[0m
[1m[38;5;2m    PyObject* vals = PyDict_Values(dict);[0m
[1m[38;5;2m    array->x = PyFloat_AsDouble(PyList_GetItem(vals,0));[0m
[1m[38;5;2m    array->y = PyFloat_AsDouble(PyList_GetItem(vals,1));[0m
[1m[38;5;2m    array->z = PyFloat_AsDouble(PyList_GetItem(vals,2));[0m
[1m[38;5;2m    fprintf(stderr, "%f %f %f\n", array->x, array->y, array->z);[0m
[1m[38;5;2m    return 1;[0m
[1m[38;5;2m    }[0m

/******************* See f2py2e/f90mod_rules.py: buildhooks *******************/

